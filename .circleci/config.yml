version: 2.1
orbs:
  codecov: codecov/codecov@1
executors:
  node:
    docker:
      - image: cimg/node:14.5
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  publisher:
    docker:
      - image: cimg/openjdk:11.0
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  helm:
    docker:
      - image: hypertrace/helm-gcs-packager:0.3.0
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
commands:
  setup_for_building:
    description: 'Checks out code and restores node modules'
    steps:
      - checkout
      - restore_cache:
          keys:
            - node_modules-3-{{ checksum "package.json" }}-{{ checksum "package-lock.json"}}
  setup_for_publishing:
    description: 'Checks out code, sets up credentials, docker and attaches workspace'
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - setup_remote_docker: &latest_remote_docker
          version: 19.03.12
      - run:
          name: Dockerhub login
          command: echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
jobs:
  npm-install-if-needed:
    executor: node
    steps:
      - setup_for_building
      - run:
          name: Install if cache missing
          command: |
            if [ ! -d node_modules ] ;
            then npm ci ;
            else echo "package.json and package-lock.json unchanged. Using cache." ;
            fi
      - run:
          name: Fail if git dirty after install
          command: test -z "$(git status --porcelain)"
      - save_cache:
          paths:
            - node_modules
          key: node_modules-3-{{ checksum "package.json" }}-{{ checksum "package-lock.json"}}
  build:
    executor: node
    steps:
      - setup_for_building
      - run: npm run build:ci
      - persist_to_workspace:
          root: dist
          paths:
            - hypertrace-ui
  lint:
    executor: node
    steps:
      - setup_for_building
      - run: npm run lint
      - run: npm run prettier:check
  test:
    executor: node
    parallelism: 2
    steps:
      - setup_for_building
      - run: npm run test:ci -- $(circleci tests glob "{projects,src}/**/*.{spec,test}.ts" | circleci tests split --split-by=timings | xargs -n 1 echo --testPathPattern)
      - codecov/upload
      - store_test_results:
          path: test-results/hypertrace-ui
      - store_artifacts:
          path: test-results/hypertrace-ui
          destination: test-results
  merge-publish:
    executor: publisher
    steps:
      - setup_for_publishing
      - run: ./gradlew dockerPushImages
  release-publish:
    executor: publisher
    steps:
      - setup_for_publishing
      - run: ./gradlew dockerPushImages
  validate-charts:
    executor: helm
    steps:
      - checkout
      - run:
          name: Helm Charts Lint and Template Render
          command: |
            helm lint --strict ./helm/
            helm template ./helm/
  release-charts:
    executor: helm
    steps:
      - checkout
      - run:
          name: Add release tag
          command: |
            git config --global user.email "${CIRCLE_USERNAME}@hypertrace.org"
            git config --global user.name "$CIRCLE_USERNAME"
            git tag -am "Released by $CIRCLE_USERNAME" $(git describe --abbrev=0 --tags | sed 's/^release-//')
      - run:
          name: Remove trigger tag
          command: git tag -d release-$(git describe --abbrev=0)
      - run:
          name: Package and Publish Helm Charts
          # Read the "name:" from Chart.yaml. The chart version is <chart-name>-<semver git tag>
          command: |
            CHART_VERSION=$(git describe --abbrev=0)
            CHART_NAME=$(awk '/^name:/ {print $2}' ./helm/Chart.yaml)
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/helm-gcs-key.json
            echo ${HELM_GCS_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
            helm dependency update ./helm/
            helm repo add helm-gcs ${HELM_GCS_REPOSITORY}
            helm package --version ${CHART_VERSION} --app-version ${CHART_VERSION} ./helm/
            helm gcs push ${CHART_NAME}-${CHART_VERSION}.tgz helm-gcs --public --retry
      - add_ssh_keys:
          fingerprints:
            # This ssh key gives write permission needed for the following step.
            - '2c:f1:1d:8b:a2:b4:6a:28:46:1d:5b:7c:b1:92:d4:ba'
      - run:
          name: Update remote tags
          command: git push origin refs/tags/$(git describe --abbrev=0) :refs/tags/release-$(git describe --abbrev=0)
workflows:
  version: 2
  build-and-publish:
    jobs:
      - npm-install-if-needed:
          context:
            - dockerhub-read
          filters:
            branches:
              only: /.*/
            tags:
              only: /^release-.*/
      - build:
          context:
            - dockerhub-read
          requires:
            - npm-install-if-needed
          filters:
            branches:
              only: /.*/
            tags:
              only: /^release-.*/
      - test:
          context:
            - dockerhub-read
          requires:
            - npm-install-if-needed
          filters:
            branches:
              only: /.*/
            tags:
              only: /^release-.*/
      - lint:
          context:
            - dockerhub-read
          requires:
            - npm-install-if-needed
          filters:
            branches:
              only: /.*/
            tags:
              only: /^release-.*/
      - validate-charts:
          context:
            - dockerhub-read
          filters:
            branches:
              only: /.*/
            tags:
              only: /^release-.*/
      - merge-publish:
          context:
            - hypertrace-publishing
            - dockerhub-read
          requires:
            - build
            - test
            - lint
            - validate-charts
          filters:
            branches:
              only:
                - main
      - release-publish:
          context:
            - hypertrace-publishing
            - dockerhub-read
          requires:
            - build
            - test
            - lint
            - validate-charts
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-.*/
      - release-charts:
          context:
            - hypertrace-publishing
            - dockerhub-read
          requires:
            - release-publish
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-.*/
